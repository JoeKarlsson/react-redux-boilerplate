'use strict';var _path;









function _load_path() {return _path = _interopRequireDefault(require('path'));}var _chalk;

function _load_chalk() {return _chalk = _interopRequireDefault(require('chalk'));}var _stripAnsi;
function _load_stripAnsi() {return _stripAnsi = _interopRequireDefault(require('strip-ansi'));}var _colorize;
function _load_colorize() {return _colorize = _interopRequireDefault(require('./colorize'));}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**
                                                                                                                                                                                            * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                                                                                                                                                                            *
                                                                                                                                                                                            * This source code is licensed under the BSD-style license found in the
                                                                                                                                                                                            * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                                                                                                            * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                                                            *
                                                                                                                                                                                            * 
                                                                                                                                                                                            */const trim = '...';const relativePathHead = './';const highlight = (rawPath, filePath, pattern,
rootDir) =>
{
  let regexp;

  try {
    regexp = new RegExp(pattern, 'i');
  } catch (e) {
    return (_chalk || _load_chalk()).default.dim(filePath);
  }

  rawPath = (0, (_stripAnsi || _load_stripAnsi()).default)(rawPath);
  filePath = (0, (_stripAnsi || _load_stripAnsi()).default)(filePath);
  const match = rawPath.match(regexp);

  if (!match) {
    return (_chalk || _load_chalk()).default.dim(filePath);
  }

  let offset;
  let trimLength;

  if (filePath.startsWith(trim)) {
    offset = rawPath.length - filePath.length;
    trimLength = trim.length;
  } else if (filePath.startsWith(relativePathHead)) {
    offset = rawPath.length - filePath.length;
    trimLength = relativePathHead.length;
  } else {
    offset = rootDir.length + (_path || _load_path()).default.sep.length;
    trimLength = 0;
  }

  const start = match.index - offset;
  const end = start + match[0].length;
  return (0, (_colorize || _load_colorize()).default)(filePath, Math.max(start, 0), Math.max(end, trimLength));
};

module.exports = highlight;