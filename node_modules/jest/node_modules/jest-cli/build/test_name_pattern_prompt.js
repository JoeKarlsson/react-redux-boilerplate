'use strict';var _chalk;










function _load_chalk() {return _chalk = _interopRequireDefault(require('chalk'));}var _scroll_list;


function _load_scroll_list() {return _scroll_list = _interopRequireDefault(require('./lib/scroll_list'));}var _terminal_utils;
function _load_terminal_utils() {return _terminal_utils = require('./lib/terminal_utils');}var _Prompt;
function _load_Prompt() {return _Prompt = _interopRequireDefault(require('./lib/Prompt'));}var _format_test_name_by_pattern;
function _load_format_test_name_by_pattern() {return _format_test_name_by_pattern = _interopRequireDefault(require('./lib/format_test_name_by_pattern'));}var _pattern_mode_helpers;
function _load_pattern_mode_helpers() {return _pattern_mode_helpers = require('./lib/pattern_mode_helpers');}var _pattern_prompt;








function _load_pattern_prompt() {return _pattern_prompt = _interopRequireDefault(require('./pattern_prompt'));}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**
                                                                                                                                                                                                              * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
                                                                                                                                                                                                              *
                                                                                                                                                                                                              * This source code is licensed under the BSD-style license found in the
                                                                                                                                                                                                              * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                                                                                                                              * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                                                                              *
                                                                                                                                                                                                              * 
                                                                                                                                                                                                              */module.exports = class TestNamePatternPrompt extends (_pattern_prompt || _load_pattern_prompt()).default {constructor(pipe, prompt) {super(pipe, prompt);this._entityName = 'tests';this._cachedTestResults = [];
  }

  _onChange(pattern, options) {
    super._onChange(pattern, options);
    this._printTypeahead(pattern, options);
  }

  _printTypeahead(pattern, options) {
    const matchedTests = this._getMatchedTests(pattern);
    const total = matchedTests.length;
    const pipe = this._pipe;
    const prompt = this._prompt;

    (0, (_pattern_mode_helpers || _load_pattern_mode_helpers()).printPatternCaret)(pattern, pipe);

    if (pattern) {
      (0, (_pattern_mode_helpers || _load_pattern_mode_helpers()).printPatternMatches)(
      total,
      'test',
      pipe,
      ` from ${(_chalk || _load_chalk()).default.yellow('cached')} test suites`);


      const width = (0, (_terminal_utils || _load_terminal_utils()).getTerminalWidth)();var _scroll =
      (0, (_scroll_list || _load_scroll_list()).default)(total, options);const start = _scroll.start,end = _scroll.end,index = _scroll.index;

      prompt.setTypeaheadLength(total);

      matchedTests.
      slice(start, end).
      map(name => (0, (_format_test_name_by_pattern || _load_format_test_name_by_pattern()).default)(name, pattern, width - 4)).
      map((item, i) => (0, (_pattern_mode_helpers || _load_pattern_mode_helpers()).formatTypeaheadSelection)(item, i, index, prompt)).
      forEach(item => (0, (_pattern_mode_helpers || _load_pattern_mode_helpers()).printTypeaheadItem)(item, pipe));

      if (total > end) {
        (0, (_pattern_mode_helpers || _load_pattern_mode_helpers()).printMore)('test', pipe, total - end);
      }
    } else {
      (0, (_pattern_mode_helpers || _load_pattern_mode_helpers()).printStartTyping)('test name', pipe);
    }

    (0, (_pattern_mode_helpers || _load_pattern_mode_helpers()).printRestoredPatternCaret)(pattern, this._currentUsageRows, pipe);
  }

  _getMatchedTests(pattern) {
    let regex;

    try {
      regex = new RegExp(pattern, 'i');
    } catch (e) {
      return [];
    }

    const matchedTests = [];

    this._cachedTestResults.forEach((_ref) => {let testResults = _ref.testResults;return (
        testResults.forEach((_ref2) => {let title = _ref2.title;
          if (regex.test(title)) {
            matchedTests.push(title);
          }
        }));});


    return matchedTests;
  }

  updateCachedTestResults() {let testResults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    this._cachedTestResults = testResults;
  }};