'use strict';Object.defineProperty(exports, "__esModule", { value: true });









var _jestMatcherUtils = require('jest-matcher-utils');






var _jest_matchers_object = require('./jest_matchers_object');

// Create and format all errors related to the mismatched number of `expect`
// calls and reset the matchers state.
/**
 * Copyright (c) 2014, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */const extractExpectedAssertionsErrors = () => {const result = [];var _getState = (0, _jest_matchers_object.getState)();const assertionCalls = _getState.assertionCalls,expectedAssertionsNumber = _getState.expectedAssertionsNumber,isExpectingAssertions = _getState.isExpectingAssertions;(0, _jest_matchers_object.setState)({ assertionCalls: 0, expectedAssertionsNumber: null });if (
  typeof expectedAssertionsNumber === 'number' &&
  assertionCalls !== expectedAssertionsNumber)
  {
    const numOfAssertionsExpected = (0, _jestMatcherUtils.EXPECTED_COLOR)(
    (0, _jestMatcherUtils.pluralize)('assertion', expectedAssertionsNumber));

    const error = new Error(
    (0, _jestMatcherUtils.matcherHint)('.assertions', '', String(expectedAssertionsNumber), {
      isDirectExpectCall: true }) +

    '\n\n' +
    `Expected ${numOfAssertionsExpected} to be called but received ` +
    (0, _jestMatcherUtils.RECEIVED_COLOR)((0, _jestMatcherUtils.pluralize)('assertion call', assertionCalls || 0)) +
    '.');

    result.push({
      actual: assertionCalls,
      error,
      expected: expectedAssertionsNumber });

  }
  if (isExpectingAssertions && assertionCalls === 0) {
    const expected = (0, _jestMatcherUtils.EXPECTED_COLOR)('at least one assertion');
    const received = (0, _jestMatcherUtils.RECEIVED_COLOR)('received none');
    const error = new Error(
    (0, _jestMatcherUtils.matcherHint)('.hasAssertions', '', '', {
      isDirectExpectCall: true }) +

    '\n\n' +
    `Expected ${expected} to be called but ${received}.`);

    result.push({
      actual: 'none',
      error,
      expected: 'at least one' });

  }

  return result;
};exports.default =

extractExpectedAssertionsErrors;